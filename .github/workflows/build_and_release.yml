name: Build and Release

on:
  push:
    paths:
      - '**.py'
      - 'assets/**'
      - '.github/workflows/build_and_release.yml'
    branches:
      - master

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io

      - name: Build Executable
        run: docker run --rm -v $PWD:/src -w /src python:3.10 bash -c "pip install --upgrade pip && pip install -r requirements.txt && pip install pyinstaller && pyinstaller --onefile main.py"

      - name: Get version
        id: get_version
        run: echo "::set-output name=version::$(python -c 'from main import __version__; print(__version__)')"

      - name: Fetch and store download count
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const { owner, repo } = context.repo
            const releases = await github.repos.listReleases({ owner, repo })
            let totalDownloadCount = 0
            if (fs.existsSync('download_count.json')) {
              totalDownloadCount = JSON.parse(fs.readFileSync('download_count.json', 'utf8')).downloads
            }
            for (const release of releases.data) {
              for (const asset of release.assets) {
                if (asset.name === 'main.exe') {
                  totalDownloadCount += asset.download_count
                }
              }
            }
            fs.writeFileSync('download_count.json', JSON.stringify({ downloads: totalDownloadCount }))

      - name: Delete old release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo
            const releases = await github.repos.listReleases({ owner, repo })
            for (const release of releases.data) {
              await github.repos.deleteRelease({ owner, repo, release_id: release.id })
              await github.git.deleteRef({ owner, repo, ref: 'tags/' + release.tag_name })
            }

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Latest v-${{ steps.get_version.outputs.version }}
          release_name: Latest v-${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/main
          asset_name: main.exe
          asset_content_type: application/octet-stream