on:
  push:
    paths:
      - 'version.txt'
    branches:
      - master
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual build request'

jobs:
  build-executables:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - name: AutoMonster
            script: main.py
          - name: LauncherAutoMonster
            script: launcher.py
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # First install common packages with binary preference
          python -m pip install --prefer-binary pillow opencv-python requests numpy customtkinter wakepy
          
          # Try to install av from a known working binary source
          python -m pip install --prefer-binary --find-links=https://github.com/PyAV-Org/PyAV/releases av==9.2.0
          if ($LASTEXITCODE -ne 0) {
            # Fallback to a compatible version if 9.2.0 fails
            python -m pip install --prefer-binary av==8.0.1
            if ($LASTEXITCODE -ne 0) {
              Write-Host "Failed to install av package. Exiting."
              exit 1
            }
          }
          
          # Install scrcpy-client explicitly - critical package
          pip install scrcpy-client==0.4.7
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Failed to install scrcpy-client package. This is a critical dependency."
            exit 1
          }
          
          # Verify scrcpy-client installation
          $scrcpyInstalled = python -c "import importlib.util; print(importlib.util.find_spec('scrcpy') is not None)"
          if ($scrcpyInstalled -eq "False") {
            Write-Host "ERROR: scrcpy-client installed but module not found. This is a critical dependency."
            exit 1
          }
          
          # Show package details
          pip show scrcpy-client
          
          # Install remaining requirements
          python -m pip install --prefer-binary -r requirements.txt
          
          # Install PyInstaller
          python -m pip install --prefer-binary pyinstaller

      - name: Build Executable
        run: |
          # Get scrcpy module path - critical for packaging
          $scrcpyPath = (python -c "import importlib.util, os; spec = importlib.util.find_spec('scrcpy'); print(os.path.dirname(spec.origin) if spec else '')")
          
          if (-not $scrcpyPath) {
            Write-Host "ERROR: Could not locate scrcpy module path. This is required for packaging."
            exit 1
          }
          
          Write-Host "scrcpy module found at: $scrcpyPath"
          
          # Find the actual scrcpy directory within the package
          $scrcpyDir = Join-Path -Path $scrcpyPath -ChildPath "scrcpy"
          if (-not (Test-Path $scrcpyDir)) {
            # Try looking directly at the site-packages directory
            $sitePackages = python -c "import site; print(site.getsitepackages()[0])"
            $scrcpyDir = Join-Path -Path $sitePackages -ChildPath "scrcpy"
          }
          
          Write-Host "scrcpy directory: $scrcpyDir"
          if (Test-Path $scrcpyDir) {
            Write-Host "Contents of scrcpy directory:"
            Get-ChildItem $scrcpyDir -Recurse | ForEach-Object { Write-Host $_.FullName }
          } else {
            Write-Host "ERROR: scrcpy directory not found. This is required for packaging."
            exit 1
          }
          
          # Build with scrcpy data
          $command = "pyinstaller --noconfirm --onefile --windowed --icon `"./assets/favicon.ico`" --add-data `"$scrcpyDir;scrcpy`" ${{ matrix.script }} -n ${{ matrix.name }}.exe"
          Write-Host "Running: $command"
          Invoke-Expression $command

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: dist/${{ matrix.name }}.exe

  create-release:
    needs: build-executables
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Delete all releases and tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete all releases
          $releases = gh release list --limit 100
          if ($releases) {
            Write-Host "Deleting all releases..."
            gh release list --limit 100 | ForEach-Object {
              $release = $_.Split("`t")[0]
              Write-Host "Deleting release: $release"
              # Added -if-present flag and error handling
              gh release delete $release --yes --cleanup-tag -if-present
              if ($LASTEXITCODE -ne 0) {
                Write-Host "Release $release not found or already deleted"
              }
            }
          } else {
            Write-Host "No releases found to delete"
          }

          # Delete any remaining tags
          Write-Host "Cleaning up tags..."
          git fetch --prune --unshallow
          git tag | ForEach-Object {
            Write-Host "Deleting tag: $_"
            git push origin --delete $_ --force 2>$null
            git tag -d $_ 2>$null
          }

      - name: Reorganize files
        run: |
          New-Item -ItemType Directory -Force -Path final_dist
          Move-Item -Path "dist/AutoMonster/AutoMonster.exe" -Destination "final_dist/AutoMonster.exe" -Force
          Move-Item -Path "dist/LauncherAutoMonster/LauncherAutoMonster.exe" -Destination "final_dist/LauncherAutoMonster.exe" -Force
          Copy-Item -Path "replace.bat" -Destination "final_dist/replace.bat" -Force
          Get-ChildItem final_dist

      - name: Install Inno Setup
        run: |
          curl -L -o is.exe "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
          .\is.exe /VERYSILENT /NORESTART /ALLUSERS

      - name: Build Installer
        run: |
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' installer.iss

      - name: Get version
        id: get_version
        run: |
          $version = Get-Content version.txt
          echo "version=$(Get-Content version.txt)" >> $env:GITHUB_OUTPUT

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v-${{ steps.get_version.outputs.version }}
          name: Version ${{ steps.get_version.outputs.version }}
          body: |
            ## Installation Instructions
            1. Download **AutoMonster_Setup.exe**
            2. Run the installer
            3. Launch AutoMonster from your Start Menu

            > **Note:** Only download the Setup file. Other assets are used by the auto-updater.
          files: |
            ./installer/AutoMonster_Setup.exe
            ./final_dist/AutoMonster.exe
            ./final_dist/LauncherAutoMonster.exe